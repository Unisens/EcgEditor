/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.9/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building an application
    id 'application'
	
	id 'eclipse'
	
	id 'cpp'
	
	//add a taskTree task for overview
	id 'com.dorongold.task-tree' version '1.3'
}

configurations {
    jre
    cert
}

model {

    platforms {
        x86 {
            architecture "x86"
        }
        x64 {
            architecture "x86_64"
        }
    }

    components {
        OseaQrsDet(NativeLibrarySpec) {
			targetPlatform "x86"
			binaries.all {
				if (targetPlatform.operatingSystem.macOsX) {
					cppCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
					cppCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/darwin"
					cppCompiler.args '-mmacosx-version-min=10.4'
					linker.args '-mmacosx-version-min=10.4'
				} else if (targetPlatform.operatingSystem.linux) {
					cppCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
					cppCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/linux"
					cppCompiler.args '-D_FILE_OFFSET_BITS=64'
				} else if (targetPlatform.operatingSystem.windows) {
					cppCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
					cppCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include/win32"
					linker.args "Shlwapi.lib", "Advapi32.lib"
				} else if (targetPlatform.operatingSystem.freeBSD) {
					cppCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
					cppCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/freebsd"
				}
			}
		}
		
        OseaQrsDet2(NativeLibrarySpec) {
			targetPlatform "x86"
			binaries.all {

				if (targetPlatform.operatingSystem.macOsX) {
					cppCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
					cppCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/darwin"
					cppCompiler.args '-mmacosx-version-min=10.4'
					linker.args '-mmacosx-version-min=10.4'
				} else if (targetPlatform.operatingSystem.linux) {
					cppCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
					cppCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/linux"
					cppCompiler.args '-D_FILE_OFFSET_BITS=64'
				} else if (targetPlatform.operatingSystem.windows) {
					cppCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
					cppCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include/win32"
					linker.args "Shlwapi.lib", "Advapi32.lib"
				} else if (targetPlatform.operatingSystem.freeBSD) {
					cppCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
					cppCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/freebsd"
				}
			}
		}
    }
}


// Define the main class for the application
mainClassName = 'de.fzi.ekgeditor.EKGEditor'


dependencies {
    compile 'com.google.guava:guava:23.0'
	compile 'com.github.unisens:unisens4java:2.2.1'
    compile ('org.eclipse.platform:org.eclipse.swt.win32.win32.x86:3.106.3') {
        transitive = false
    }
    //compile ('org.eclipse.platform:org.eclipse.swt.win32.win32.x86_64:3.106.3') {
    //    transitive = false
    //}

	compile group: 'commons-io', name: 'commons-io', version: '2.6'
	compile group: 'net.harawata', name: 'appdirs', version: '1.0.1'

    // Use JUnit test framework
    testCompile 'junit:junit:4.12'
	
	
	jre('com.movisens.dataanalyzer.requirements:jre:1.8.0_60')
    cert('com.movisens.dataanalyzer.requirements:cert:1.0')
}

task requirements(type: Copy) {

    from({ zipTree(configurations.jre.singleFile) }){
    	into 'jre'
    	}
 
 	from({ zipTree(configurations.cert.singleFile) }){
        into 'cert'
 		}

    into 'build/req'
}

//task setVersion(type: Copy) {
//	include "src/main/java/de/fzi/ekgeditor/data/Constants.java"
//	filter{ it.replaceAll('ECGEDITOR_VERSION', '1.0.0')}
//}


repositories {
	maven {
		url = 'https://dev.movisens.com/artifactory/libs-release-local'
		credentials {
			username = "${artifactory_user}"
			password = "${artifactory_password}"
		}
	}
	
    jcenter()
	maven { url "https://jitpack.io" }

}


installDist {
	dependsOn << build
	dependsOn << requirements
}

//build {
//	dependsOn << setVersion
//}

distributions {
    main {
        contents {
            from('build/libs/oseaQrsDet/shared') {
                include '*.dll'
				into 'lib'
            }
            from('build/libs/oseaQrsDet2/shared') {
                include '*.dll'
				into 'lib'
            }
        }
    }
}



